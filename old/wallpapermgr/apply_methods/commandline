#!/usr/bin/env python2
"""
Name :          apply_methods/commandline
Created :       August 29 2016
Author :        Will Pittman
Contact :       willjpittman@gmail.com
________________________________________________________________________________
Description :  Run an entirely custom command of your choosing.

               args/kwds get passed directly to the commandline.

               args are presented (in order) to the commandline first, followed by
               keywords.


               ex:
                   ## arguments:
                   args = ['icewmbg', '{filepath}' ]
                   kwds = {'--loglevel': 'DEBUG', '--other-key':'SOMETHING' }

                   ## becomes
                   icewmbg "/path/to/file.tga" --loglevel DEBUG --other-key SOMETHING
________________________________________________________________________________
"""

import shlex
import sys
import json
import subprocess
import logging


logger = logging.getLogger(__name__)


def parse_stdin():
    stdin = json.loads(sys.stdin.read())
    # specialvars = stdin['specialvars']

    args = []
    kwds = {}

    # Customized
    if 'args' in stdin:
        if stdin['args']:
            args = stdin['args']
    if 'kwds' in stdin:
        if stdin['kwds']:
            kwds = stdin['kwds']

    return (stdin, args, kwds)


def logging_setup(stdin):
    loglevel = logging.INFO

    if 'loglevel' in stdin:
        loglevel = stdin['loglevel']

    logging.basicConfig(level=loglevel)


def run(args, kwds):
    """
    passes all arguments, then all keywords to feh
    then run command.
    """

    cmd = []

    # if 'args' is being used as the CLI argument
    if len(args) == 1 and not kwds:
        cmd = shlex.split(args[0].strip())

    # if 'args/kwds' are being used, parse like normal
    else:
        cmd.extend([arg.strip() for arg in args])
    if kwds:
        for key, val in kwds.items():
            cmd.append(key.strip())
            cmd.append(val.strip())

    logger.debug('subprocess.call(%s)'.format(repr(cmd)))
    subprocess.call(cmd)


if __name__ == '__main__':
    (stdin, args, kwds) = parse_stdin()
    logging_setup(stdin)
    run(args, kwds)
